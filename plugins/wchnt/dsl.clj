(ns wchnt.dsl
  (:require [clojure.string :as str]))

(defn get-metadata []
  {:name "wchnt"
   :type :clojure-jar
   :description "A DSL for describing data-schemas and object-oriented architectures"
   :version "1.0.0"
   :author "Generated by makedsl foreign target"
   :jar-file "wchnt-lang.jar"})

(defn get-plugin [tag-path load-fns]
  (let [dslname "wchnt"
        ;; Load the namespace once when the plugin is initialized
        load-clojure-namespace (:load-clojure-namespace load-fns)
        _ (load-clojure-namespace 'wchnt_lang.core)]
    {:metadata (get-metadata)
     :grammar
     {:rules {"S" "SchemaDefinition"
              "SchemaDefinition" "ClassDefinition*"
              "ClassDefinition" "'class' SPACE ClassName SPACE '{' SPACE PropertyDefinition* SPACE '}'"
              "ClassName" "#'[A-Za-z][A-Za-z0-9_]*'"
              "PropertyDefinition" "PropertyName SPACE ':' SPACE PropertyType"
              "PropertyName" "#'[a-z][a-zA-Z0-9_]*'"
              "PropertyType" "'String' | 'Int' | 'Float' | 'Boolean' | ClassName"
              "<SPACE>" "#'\\\\s+'"}
      :start "S"}
     :targets
     {"haxe"
      {:description "Generate Haxe classes using WCHNT library"
       :compile-fn (fn [s] 
                     (try
                       (let [compile-fn (ns-resolve 'wchnt_lang.core 'compile_to_haxe)
                             result (compile-fn s)]
                         (if (and (map? result) (:success result))
                           {:success true
                            :code (:code result)
                            :notes "Generated Haxe classes using WCHNT library"
                            :warning ""}
                           {:success false
                            :code [""]
                            :notes "WCHNT compilation failed"
                            :warning "See :error"
                            :error (str result)}))
                       (catch Exception e
                         (println "Exception in compile-to-haxe:" (.getMessage e))
                         (.printStackTrace e)
                         {:success false
                          :code [""]
                          :notes "Error during compilation"
                          :warning "See :error"
                          :error (.getMessage e)})))
       :header-fn (fn []
                    {:success true
                     :code "WCHNT Library Integration
This header provides information about the WCHNT library integration.

The WCHNT library provides:
- DSL parsing for data schema definitions (via get-parser())
- Haxe code generation from WCHNT DSL (via compile-to-haxe)
- Code validation and eyeball functionality (via eyeball)

The library is loaded from wchnt-lang.jar and provides:
- wchnt_lang.core/get_parser - Returns the Instaparse parser for WCHNT DSL
- wchnt_lang.core/compile_to_haxe - Main compilation function
- wchnt_lang.core/eyeball - Code validation function
- wchnt_lang.core/validate_wchnt_syntax - Syntax validation

The output includes generated Haxe class definitions based on the WCHNT DSL input.
The plugin uses the library's own parser to avoid duplicating evolving syntax rules."
                     :notes "Information about WCHNT library integration"
                     :warning "The output is generated using the WCHNT library"})
       :eyeball-fn (fn [code]
                     (try
                       (let [eyeball-fn (ns-resolve 'wchnt_lang.core 'eyeball)
                             result (eyeball-fn code)]
                         (if (map? result)
                           result
                           {:status "issues"
                            :issues ["Failed to validate code with WCHNT library"]
                            :notes "Error during eyeball validation"}))
                       (catch Exception e
                         (println "Exception in eyeball validation:" (.getMessage e))
                         {:status "issues"
                          :issues [(str "Eyeball validation failed: " (.getMessage e))]
                          :notes "Error during WCHNT eyeball validation"})))
       :prompts {
                 :compile "Compiles WCHNT DSL input to Haxe classes using the WCHNT library.

Arguments:
- dsl: The WCHNT DSL input describing data schemas and object relationships (required)

Example:
Input: 
class Person {
  name: String
  age: Int
  email: String
}

Output:
// Generated Haxe classes using WCHNT library
class Person {
  public var name: String;
  public var age: Int;
  public var email: String;
  
  public function new(name: String, age: Int, email: String) {
    this.name = name;
    this.age = age;
    this.email = email;
  }
}

Notes:
- The WCHNT DSL describes data schemas using a BNF-like grammar
- The library generates Haxe classes with proper constructors and properties
- The plugin uses the library's own parser to avoid duplicating evolving syntax
- This is the Haxe target implementation of the WCHNT DSL"
                 :header "Gets information about the WCHNT library integration.

Example Output:
WCHNT Library Integration
This header provides information about the WCHNT library integration.

Notes:
- The WCHNT library provides DSL parsing and Haxe code generation
- The library is loaded from wchnt-lang.jar
- The plugin uses the library's own parser via get-parser()
- This is the Haxe target implementation of the WCHNT DSL header"
                 :eyeball "Performs sanity checks on generated Haxe code using WCHNT library.

Checks:
- Validates generated Haxe code structure using library's eyeball function
- Ensures proper class definitions and properties
- Verifies constructor and method implementations

Example:
Input: Generated Haxe code
Output: Status and any issues found

Notes:
- Uses WCHNT library's eyeball function for validation
- Ensures generated code follows WCHNT conventions
- This is the Haxe target implementation of the WCHNT DSL eyeball function"
                 }
       }
      }
     }))

;; Return both functions as a map - this is the last expression in the file
{:get-metadata get-metadata
 :get-plugin get-plugin} 