(ns wchnt.dsl
  (:require [clojure.string :as str]
            [clojure.edn :as edn]))

(defn get-metadata []
  {:name "wchnt"
   :type :java-jar
   :description "A DSL for describing data-schemas and object-oriented architectures"
   :version "1.0.0"
   :author "Generated by makedsl foreign target"
   :jar-file "wchnt-lang.jar"})

(defn get-plugin [tag-path load-fns]
  (let [dslname "wchnt"
        load-java-class (:load-java-class load-fns)
        wchnt-api-class (load-java-class "wchnt_lang.WchntAPI")
        api-instance (.newInstance wchnt-api-class)]
    (println "DEBUG: WCHNT plugin loaded, api-instance:" api-instance)
    {:metadata (get-metadata)
     :grammar
     {:rules {"S" "SchemaDefinition"
              "SchemaDefinition" "ClassDefinition*"
              "ClassDefinition" "'class' SPACE ClassName SPACE '{' SPACE PropertyDefinition* SPACE '}'"
              "ClassName" "#'[A-Za-z][A-Za-z0-9_]*'"
              "PropertyDefinition" "PropertyName SPACE ':' SPACE PropertyType"
              "PropertyName" "#'[a-z][a-zA-Z0-9_]*'"
              "PropertyType" "'String' | 'Int' | 'Float' | 'Boolean' | ClassName"
              "<SPACE>" "#'\\\\s+'"}
      :start "S"}
     :targets
     {"haxe"
      {:description "Generate Haxe classes using WCHNT library"
       :compile-fn (fn [s] 
                     (println "DEBUG: compileToHaxe called with input:" s)
                     (try
                       ;; First validate the input using the parser
                       (let [parser (.getParser api-instance)
                             parse-result (.apply parser s)
                             success (.get parse-result "success")]
                         (println "DEBUG: Parser validation result:" parse-result)
                         (if (not success)
                           ;; Parsing failed, return error
                           (let [error (.get parse-result "error")]
                             (println "DEBUG: Parsing failed with error:" error)
                             {:success false
                              :code [""]
                              :notes "WCHNT syntax validation failed"
                              :warning "See :error"
                              :error (str "Invalid WCHNT syntax: " error)})
                           ;; Parsing succeeded, proceed with compilation
                           (let [result (.compileToHaxe api-instance s)]
                             (println "DEBUG: compileToHaxe returned:" result)
                             (println "DEBUG: result type:" (type result))
                             (println "DEBUG: result class:" (.getClass result))
                             (if (and (instance? java.util.List result) (pos? (.size result)))
                               (do
                                 (println "DEBUG: Success case - converting to vector")
                                 (let [code-vec (vec result)]
                                   (println "DEBUG: code-vec:" code-vec)
                                   {:success true
                                    :code code-vec
                                    :notes "Generated Haxe classes using WCHNT library"
                                    :warning ""}))
                               (do
                                 (println "DEBUG: Failure case - no classes generated")
                                 {:success false
                                  :code [""]
                                  :notes "WCHNT compilation failed - no classes generated"
                                  :warning "See :error"
                                  :error "No classes were generated"})))))
                       (catch Exception e
                         (println "DEBUG: Exception in compile-to-haxe:" (.getMessage e))
                         (.printStackTrace e)
                         {:success false
                          :code [""]
                          :notes "Error during compilation"
                          :warning "See :error"
                          :error (.getMessage e)})))
       :header-fn (fn []
                    {:success true
                     :code "WCHNT Library Integration\nThis header provides information about the WCHNT library integration.\n\nThe WCHNT library provides:\n- DSL parsing for data schema definitions (via getParser())\n- Haxe code generation from WCHNT DSL (via compileToHaxe)\n- Code validation and eyeball functionality (via eyeball)\n- Grammar access (via grammarAsString)\n\nThe library is loaded from wchnt-lang.jar and provides:\n- wchnt_lang.WchntAPI.compileToHaxe - Main compilation function (returns List<String>)\n- wchnt_lang.WchntAPI.getParser - Returns callable parser function (Function<String, Map>)\n- wchnt_lang.WchntAPI.eyeball - Code validation function\n- wchnt_lang.WchntAPI.grammarAsString - Returns grammar definition\n\nThe output includes generated Haxe class definitions based on the WCHNT DSL input.\nThe plugin uses the library's Java API for clean integration and validates input syntax before compilation."
                     :notes "Information about WCHNT library integration"
                     :warning "The output is generated using the WCHNT library"})
       :eyeball-fn (fn [code]
                     (try
                       (let [result (.eyeball api-instance code)
                             parsed-result (edn/read-string result)]
                         (if (map? parsed-result)
                           ;; Ensure the result has the correct schema structure
                           {:status (or (:status parsed-result) "issues")
                            :issues (or (:issues parsed-result) [])
                            :notes (or (:notes parsed-result) "WCHNT eyeball validation result")}
                           {:status "issues"
                            :issues ["Failed to validate code with WCHNT library"]
                            :notes "Error during eyeball validation"}))
                       (catch Exception e
                         (println "Exception in eyeball validation:" (.getMessage e))
                         {:status "issues"
                          :issues [(str "Eyeball validation failed: " (.getMessage e))]
                          :notes "Error during WCHNT eyeball validation"})))
       :prompts {
                 :compile "Compiles WCHNT DSL input to Haxe classes using the WCHNT library.\n\nArguments:\n- dsl: The WCHNT DSL input describing data schemas and object relationships (required)\n\nExample:\nInput: \nGame = PlayArea Ball\nPlayArea = Rect\nRect = int/x int/y int/width int/height\n\nOutput:\n// Generated Haxe classes using WCHNT library\nclass Game {\n  public var playArea: PlayArea;\n  public var ball: Ball;\n  \n  public function new(playArea: PlayArea, ball: Ball) {\n    this.playArea = playArea;\n    this.ball = ball;\n  }\n}\n\nNotes:\n- The WCHNT DSL describes data schemas using a BNF-like grammar\n- Input is validated using the parser before compilation\n- The library generates Haxe classes with proper constructors and properties\n- The plugin uses the library's Java API for clean integration\n- Returns a list of Haxe class strings, one for each generated class\n- This is the Haxe target implementation of the WCHNT DSL"
                 :header "Gets information about the WCHNT library integration.\n\nExample Output:\nWCHNT Library Integration\nThis header provides information about the WCHNT library integration.\n\nNotes:\n- The WCHNT library provides DSL parsing and Haxe code generation\n- The library is loaded from wchnt-lang.jar\n- The plugin uses the library's Java API via wchnt_lang.WchntAPI\n- Input validation is performed using the parser before compilation\n- This is the Haxe target implementation of the WCHNT DSL header"
                 :eyeball "Performs sanity checks on generated Haxe code using WCHNT library.\n\nChecks:\n- Validates generated Haxe code structure using library's eyeball function\n- Ensures proper class definitions and properties\n- Verifies constructor and method implementations\n\nExample:\nInput: Generated Haxe code\nOutput: Status and any issues found\n\nNotes:\n- Uses WCHNT library's eyeball function for validation\n- Ensures generated code follows WCHNT conventions\n- This is the Haxe target implementation of the WCHNT DSL eyeball function"
                 }
       }
      }
     }))

;; Return both functions as a map - this is the last expression in the file
{:get-metadata get-metadata
 :get-plugin get-plugin} 