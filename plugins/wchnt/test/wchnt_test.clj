(ns wchnt.test.wchnt-test
  (:require [clojure.test :refer :all]
            [clojure.string :as str]
            [wchnt.dsl :refer [get-plugin]]))

(deftest test-wchnt-plugin
  (testing "Plugin structure"
    (let [plugin (get-plugin (fn [& args] args))]
      (is (= "wchnt" (:name plugin)))
      (is (contains? (:targets plugin) "haxe"))
      (is (fn? (get-in plugin [:targets "haxe" :compile-fn])))
      (is (fn? (get-in plugin [:targets "haxe" :header-fn])))
      (is (fn? (get-in plugin [:targets "haxe" :eyeball-fn]))))))

(deftest test-wchnt-compilation
  (testing "Basic compilation"
    (let [plugin (get-plugin (fn [& args] args))
          compile-fn (get-in plugin [:targets "haxe" :compile-fn])
          result (compile-fn "Game = PlayArea Ball")]
      (is (map? result))
      (is (contains? result :success))
      (is (contains? result :code)))))

(deftest test-wchnt-compilation-pong-example
  (testing "Pong game compilation"
    (let [plugin (get-plugin (fn [& args] args))
          compile-fn (get-in plugin [:targets "haxe" :compile-fn])
          input "Game = PlayArea Ball Paddle/paddle1 Paddle/paddle2
PlayArea = Rect
Ball = int/x int/y int/dx int/dy int/rad
Paddle = int/x int/y
Rect = int/x int/y int/width int/height"
          result (compile-fn input)]
      (is (:success result))
      (is (vector? (:code result)))
      (is (= 5 (count (:code result)))) ; Should generate 5 classes: Game, PlayArea, Ball, Paddle, Rect
      (is (some #(str/includes? % "class Game") (:code result)))
      (is (some #(str/includes? % "public var playArea: PlayArea") (:code result)))
      (is (some #(str/includes? % "public var paddle1: Paddle") (:code result)))
      (is (some #(str/includes? % "public var paddle2: Paddle") (:code result))))))

(deftest test-wchnt-compilation-default-naming
  (testing "Default naming (lowercase first letter)"
    (let [plugin (get-plugin (fn [& args] args))
          compile-fn (get-in plugin [:targets "haxe" :compile-fn])
          input "Person = String/name int/age"
          result (compile-fn input)]
      (is (:success result))
      (is (some #(str/includes? % "public var name: String") (:code result)))
      (is (some #(str/includes? % "public var age: int") (:code result))))))

(deftest test-wchnt-compilation-constructor
  (testing "Constructor generation"
    (let [plugin (get-plugin (fn [& args] args))
          compile-fn (get-in plugin [:targets "haxe" :compile-fn])
          input "Game = PlayArea Ball"
          result (compile-fn input)
          game-class (first (:code result))]
      (is (:success result))
      (is (str/includes? game-class "public function new("))
      (is (str/includes? game-class "playArea: PlayArea"))
      (is (str/includes? game-class "ball: Ball"))
      (is (str/includes? game-class "this.playArea = playArea"))
      (is (str/includes? game-class "this.ball = ball")))))

(deftest test-wchnt-header
  (testing "Header generation"
    (let [plugin (get-plugin (fn [& args] args))
          header-fn (get-in plugin [:targets "haxe" :header-fn])
          result (header-fn)]
      (is (map? result))
      (is (contains? result :success))
      (is (contains? result :code))
      (is (str/includes? (:code result) "Generated by wchnt DSL"))
      (is (str/includes? (:code result) "immutable")))))

(deftest test-wchnt-eyeball
  (testing "Eyeball function"
    (let [plugin (get-plugin (fn [& args] args))
          eyeball-fn (get-in plugin [:targets "haxe" :eyeball-fn])
          result (eyeball-fn "class Test { public var field: Type; }")]
      (is (map? result))
      (is (contains? result :status))
      (is (contains? result :issues)))))

(deftest test-wchnt-eyeball-valid-code
  (testing "Eyeball with valid Haxe code"
    (let [plugin (get-plugin (fn [& args] args))
          eyeball-fn (get-in plugin [:targets "haxe" :eyeball-fn])
          valid-code "class Game {
    public var playArea: PlayArea;
    public var ball: Ball;
    
    public function new(playArea: PlayArea, ball: Ball) {
        this.playArea = playArea;
        this.ball = ball;
    }
}"
          result (eyeball-fn valid-code)]
      (is (= "seems ok" (:status result)))
      (is (empty? (:issues result))))))

(deftest test-wchnt-eyeball-invalid-code
  (testing "Eyeball with invalid Haxe code"
    (let [plugin (get-plugin (fn [& args] args))
          eyeball-fn (get-in plugin [:targets "haxe" :eyeball-fn])
          invalid-code "function test() { return 42; }"
          result (eyeball-fn invalid-code)]
      (is (= "issues" (:status result)))
      (is (not (empty? (:issues result)))))))

(run-tests)